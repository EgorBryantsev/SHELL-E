<?xml version="1.0" ?>
<robot name="turtlebot3_burger"
  xmlns:xacro="http://ros.org/wiki/xacro">

  <!-- Common Properties (Normally included, but fine to define PI directly if not using the include) -->
  <!-- <xacro:include filename="$(find turtlebot3_description)/urdf/common_properties.urdf"/> -->
  <xacro:property name="PI" value="3.1415926535897931"/>

  <!-- Standard TurtleBot3 Burger Material Definitions -->
  <material name="black">
      <color rgba="0.0 0.0 0.0 1.0"/>
  </material>
  <material name="dark">
    <color rgba="0.3 0.3 0.3 1.0"/>
  </material>
  <material name="light_black">
    <color rgba="0.4 0.4 0.4 1.0"/>
  </material>
  <material name="blue">
    <color rgba="0.0 0.0 0.8 1.0"/>
  </material>
  <material name="green">
    <color rgba="0.0 0.8 0.0 1.0"/>
  </material>
  <material name="grey">
    <color rgba="0.5 0.5 0.5 1.0"/>
  </material>
  <material name="orange">
    <color rgba="1.0 0.4235 0.0392 1.0"/>
  </material>
  <material name="brown">
    <color rgba="0.8706 0.8118 0.7647 1.0"/>
  </material>
  <material name="red">
    <color rgba="0.8 0.0 0.0 1.0"/>
  </material>
  <material name="white">
    <color rgba="1.0 1.0 1.0 1.0"/>
  </material>

  <!-- Standard TurtleBot3 Burger Links and Joints -->
  <link name="base_footprint"/>

  <joint name="base_joint" type="fixed">
    <parent link="base_footprint"/>
    <child link="base_link"/>
    <origin xyz="0.0 0.0 0.010" rpy="0 0 0"/>
  </joint>

  <link name="base_link">
    <visual>
      <origin xyz="-0.032 0 0.0" rpy="0 0 0"/>
      <geometry>
        <mesh filename="package://turtlebot3_description/meshes/bases/burger_base.stl" scale="0.001 0.001 0.001"/>
      </geometry>
      <material name="light_black"/>
    </visual>
    <collision>
      <origin xyz="-0.032 0 0.070" rpy="0 0 0"/>
      <geometry>
        <box size="0.140 0.140 0.143"/>
      </geometry>
    </collision>
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="8.2573504e-01"/>
      <inertia ixx="2.2124416e-03" ixy="-1.2294101e-05" ixz="3.4938785e-05" iyy="2.1193702e-03" iyz="-5.0120904e-06" izz="2.0064271e-03" />
    </inertial>
  </link>

  <joint name="wheel_left_joint" type="continuous">
    <parent link="base_link"/>
    <child link="wheel_left_link"/>
    <origin xyz="0.0 0.08 0.023" rpy="-1.57079632679 0 0"/> <!-- Using numerical value for -PI/2 -->
    <axis xyz="0 0 1"/>
  </joint>

  <link name="wheel_left_link">
    <visual>
      <origin xyz="0 0 0" rpy="1.57079632679 0 0"/> <!-- Using numerical value for PI/2 -->
      <geometry>
        <mesh filename="package://turtlebot3_description/meshes/wheels/left_tire.stl" scale="0.001 0.001 0.001"/>
      </geometry>
      <material name="dark"/>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/> <!-- Collision geometry often simplified and aligned with link frame -->
      <geometry>
        <cylinder length="0.018" radius="0.033"/>
      </geometry>
    </collision>
    <inertial>
      <origin xyz="0 0 0" />
      <mass value="2.8498940e-02" />
      <inertia ixx="1.1175580e-05" ixy="-4.2369783e-11" ixz="-5.9381719e-09" iyy="1.1192413e-05" iyz="-1.4400107e-11" izz="2.0712558e-05" />
    </inertial>
  </link>

  <joint name="wheel_right_joint" type="continuous">
    <parent link="base_link"/>
    <child link="wheel_right_link"/>
    <origin xyz="0.0 -0.080 0.023" rpy="-1.57079632679 0 0"/> <!-- Using numerical value for -PI/2 -->
    <axis xyz="0 0 1"/>
  </joint>

  <link name="wheel_right_link">
    <visual>
      <origin xyz="0 0 0" rpy="1.57079632679 0 0"/> <!-- Using numerical value for PI/2 -->
      <geometry>
        <mesh filename="package://turtlebot3_description/meshes/wheels/right_tire.stl" scale="0.001 0.001 0.001"/>
      </geometry>
      <material name="dark"/>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder length="0.018" radius="0.033"/>
      </geometry>
    </collision>
    <inertial>
      <origin xyz="0 0 0" />
      <mass value="2.8498940e-02" />
      <inertia ixx="1.1175580e-05" ixy="-4.2369783e-11" ixz="-5.9381719e-09" iyy="1.1192413e-05" iyz="-1.4400107e-11" izz="2.0712558e-05" />
    </inertial>
  </link>

  <joint name="caster_back_joint" type="fixed">
    <parent link="base_link"/>
    <child link="caster_back_link"/>
    <origin xyz="-0.081 0 -0.004" rpy="-1.57079632679 0 0"/> <!-- Using numerical value for -PI/2 -->
  </joint>

  <link name="caster_back_link">
    <collision>
      <origin xyz="0 0.001 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.030 0.009 0.020"/>
      </geometry>
    </collision>
    <inertial>
      <origin xyz="0 0 0" />
      <mass value="0.005" />
      <inertia ixx="0.001" ixy="0.0" ixz="0.0" iyy="0.001" iyz="0.0" izz="0.001" />
    </inertial>
  </link>

  <joint name="imu_joint" type="fixed">
    <parent link="base_link"/>
    <child link="imu_link"/>
    <origin xyz="-0.032 0 0.068" rpy="0 0 0"/>
  </joint>
  <link name="imu_link"/>

  <joint name="scan_joint" type="fixed">
    <parent link="base_link"/>
    <child link="base_scan"/>
    <origin xyz="-0.032 0 0.172" rpy="0 0 0"/>
  </joint>
  <link name="base_scan">
    <visual>
      <origin xyz="0 0 0.0" rpy="0 0 0"/>
      <geometry>
        <mesh filename="package://turtlebot3_description/meshes/sensors/lds.stl" scale="0.001 0.001 0.001"/>
      </geometry>
      <material name="dark"/>
    </visual>
    <collision>
      <origin xyz="0.015 0 -0.0065" rpy="0 0 0"/>
      <geometry>
        <cylinder length="0.0315" radius="0.055"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.114" />
      <origin xyz="0 0 0" />
      <inertia ixx="0.001" ixy="0.0" ixz="0.0" iyy="0.001" iyz="0.0" izz="0.001" />
    </inertial>
  </link>

  <!-- =================================================================== -->
  <!--                            CAMERA ADDITION                          -->
  <!-- =================================================================== -->

  <!-- Camera Link -->
  <link name="camera_link">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.02 0.05 0.05"/>
      </geometry>
      <material name="blue"/>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.02 0.05 0.05"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.01" />
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
    </inertial>
  </link>

  <!-- Camera Joint -->
  <joint name="camera_joint" type="fixed">
    <parent link="base_link"/>
    <child link="camera_link"/>
    <origin xyz="0.07 0 0.1" rpy="0 0 0"/> <!-- Position: 7cm forward, 10cm up from base_link center -->
  </joint>

  <!-- Camera Optical Frame -->
  <link name="camera_rgb_optical_frame"/>
  <joint name="camera_rgb_optical_joint" type="fixed">
    <origin xyz="0 0 0" rpy="-1.57079632679 0 -1.57079632679"/> <!-- Rotates from camera_link to optical frame: Z forward, X right, Y down -->
    <parent link="camera_link"/>
    <child link="camera_rgb_optical_frame"/>
  </joint>

  <!-- Gazebo Camera Sensor Plugin -->
  <gazebo reference="camera_link"> <!-- Attach sensor to the physical camera_link -->
    <sensor type="camera" name="turtlebot_sim_camera_sensor"> <!-- Unique Gazebo sensor name -->
      <always_on>true</always_on>
      <update_rate>30.0</update_rate>
      <visualize>true</visualize> <!-- Show camera frustum in Gazebo -->

      <camera name="turtlebot_sim_camera"> <!-- Internal Gazebo camera identifier -->
        <horizontal_fov>${100.0 * PI / 180.0}</horizontal_fov> <!-- Example: 100 degrees FOV -->
        <image>
          <width>640</width>
          <height>480</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.05</near>
          <far>8.0</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>

      <plugin name="gazebo_ros_camera" filename="libgazebo_ros_camera.so">
        <ros>
          <!-- Specify the ROS node name for this plugin instance -->
          <argument>--ros-args -r __node:=tb3_camera_driver</argument>
          <!-- Optional: Namespace for all topics from this plugin -->
          <!-- <namespace>tb3</namespace> -->
        </ros>

        <!-- Topic and Frame Configuration -->
        <!-- <camera_name> sets a prefix for default topic names (image_raw, camera_info) -->
        <!-- If namespace = tb3 and camera_name = front_cam, topics will be /tb3/front_cam/image_raw etc. -->
        <!-- If no namespace, and camera_name = front_cam, topics will be /front_cam/image_raw etc. -->
        <!-- If no namespace, and NO camera_name tag, topics will be /image_raw, /camera_info -->
        <camera_name>camera</camera_name> <!-- This will result in /camera/image_raw -->

        <!-- The TF frame_id that will be in the header of the ROS image messages -->
        <frame_name>camera_rgb_optical_frame</frame_name>

        <!-- Optional more explicit topic remappings (overrides camera_name defaults if used) -->
        <!-- <image_topic_name>my_image_topic</image_topic_name> -->
        <!-- <camera_info_topic_name>my_camera_info_topic</camera_info_topic_name> -->
      </plugin>
    </sensor>
  </gazebo>
  <!-- =================================================================== -->
  <!--                        END CAMERA ADDITION                        -->
  <!-- =================================================================== -->

</robot>